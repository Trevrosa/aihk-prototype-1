var searchIndex = JSON.parse('{\
"common":{"doc":"","t":"DDDDLLLLLLLLLLLLLLLLMMMMMMLLLLLLLLLLLLMMMALLLLLMMLLLLLLLLLLLLLLLLLLLLMMMMDLLMLLLLMLLL","n":["Comment","Post","Session","User","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","comments","content","content","created","created","created","deserialize","deserialize","deserialize","deserialize","fmt","fmt","fmt","fmt","from","from","from","from","id","id","id","inputs","into","into","into","into","new","password","post_id","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","username","username","username","username","InputComment","borrow","borrow_mut","content","deserialize","fmt","from","into","post_id","try_from","try_into","type_id"],"q":[[0,"common"],[73,"common::inputs"]],"d":["A that can be <code>Serialized</code> and <code>Deserialized</code>","A post that can be <code>Serialized</code> and <code>Deserialized</code>","A user session that can be <code>Serialized</code> and <code>Deserialized</code>","A user that can be <code>Serialized</code> and <code>Deserialized</code>","","","","","","","","","","","","","","","","","Posts can have no comments.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Comments can be created from <code>frontend</code>, meaning no <code>id</code> is …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Comments must have a post_id to be valid.","","","","","","","","","","","","","","","","","","","","","","","","","Used only as an input to an API endpoint","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","",""],"i":[0,0,0,0,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,3,3,4,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,3,4,0,1,2,3,4,2,2,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,0,12,12,12,12,12,12,12,12,12,12,12],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[5,[[6,[1]]]],[5,[[6,[2]]]],[5,[[6,[3]]]],[5,[[6,[4]]]],[[1,7],8],[[2,7],8],[[3,7],8],[[4,7],8],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[9,9],2],0,0,[[1,10],6],[[2,10],6],[[3,10],6],[[4,10],6],[[]],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],11],[[],11],[[],11],[[],11],0,0,0,0,0,[[]],[[]],0,[5,[[6,[12]]]],[[12,7],8],[[]],[[]],0,[[],6],[[],6],[[],11]],"c":[],"p":[[3,"Session"],[3,"User"],[3,"Post"],[3,"Comment"],[8,"Deserializer"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"String"],[8,"Serializer"],[3,"TypeId"],[3,"InputComment"]]},\
"frontend":{"doc":"","t":"FFF","n":["get_document","get_input","set_text"],"q":[[0,"frontend"]],"d":["Shorthand for <code>web_sys::window().unwrap().document.unwrap()</code>","Get the value of a textarea by id","Set the <code>text_content</code> of an element by id"],"i":[0,0,0],"f":[[[],1],[2,3],[[2,2]]],"c":[],"p":[[3,"Document"],[15,"str"],[3,"String"]]},\
"server":{"doc":"","t":"DDDDIILLLLLLLLMMMMMLLLLLLLLKKLLLLMMMMLLLLLMLLLLLLLLLLLLMMMMF","n":["DBComment","DBPost","DBSession","DBUser","FromDBComment","FromDBPost","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","content","content","created","created","created","fmt","fmt","fmt","fmt","from","from","from","from","from_db","from_db","from_row","from_row","from_row","from_row","hashed_password","id","id","id","into","into","into","into","new","post_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","username","username","username","username","verify_auth"],"q":[[0,"server"]],"d":["<code>DBComment</code>s are individual comments with an <code>id</code> and <code>post_id</code>.","<code>DBPost</code>s are individual posts without comments attached to …","A user sesion","<code>User</code>s are never stored in database. Instead, <code>DBUser</code> is …","Convert from <code>&amp;DBComment</code> to owned <code>Comment</code> by cloning","Convert from owned <code>DBPost</code> to <code>Post</code> by attaching comments.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Because an <code>id</code> is stored as an <code>INTEGER PRIMARY KEY</code>, <code>id</code> has …","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Returns [<code>Ok(DBSession)</code>] if session_id was found in …"],"i":[0,0,0,0,0,0,1,4,5,6,1,4,5,6,5,6,4,5,6,1,4,5,6,1,4,5,6,21,22,1,4,5,6,4,1,5,6,1,4,5,6,6,6,1,4,5,6,1,4,5,6,1,4,5,6,1,4,5,6,0],"f":[0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,[[1,2],3],[[4,2],3],[[5,2],3],[[6,2],3],[[]],[[]],[[]],[[]],[[5,[9,[[8,[7]]]]]],[6],[10,[[11,[1]]]],[10,[[11,[4]]]],[10,[[11,[5]]]],[10,[[11,[6]]]],0,0,0,0,[[]],[[]],[[]],[[]],[[12,12,13,13],6],0,[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],0,0,0,0,[[[17,[16]],[19,[18]]],[[14,[1,20]]]]],"c":[],"p":[[3,"DBSession"],[3,"Formatter"],[6,"Result"],[3,"DBUser"],[3,"DBPost"],[3,"DBComment"],[3,"Comment"],[3,"Vec"],[4,"Option"],[8,"Row"],[6,"Result"],[15,"u32"],[15,"str"],[4,"Result"],[3,"TypeId"],[3,"Bearer"],[3,"Authorization"],[3,"Sqlite"],[3,"Pool"],[4,"Error"],[8,"FromDBPost"],[8,"FromDBComment"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
